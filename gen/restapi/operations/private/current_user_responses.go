// Code generated by go-swagger; DO NOT EDIT.

package private

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/Close-Encounters-Corps/cec-gateway/gen/models"
)

// CurrentUserOKCode is the HTTP code returned for type CurrentUserOK
const CurrentUserOKCode int = 200

/*CurrentUserOK User found

swagger:response currentUserOK
*/
type CurrentUserOK struct {
	/*Trace ID

	 */
	XTraceID string `json:"X-Trace-Id"`

	/*
	  In: Body
	*/
	Payload *models.User `json:"body,omitempty"`
}

// NewCurrentUserOK creates CurrentUserOK with default headers values
func NewCurrentUserOK() *CurrentUserOK {

	return &CurrentUserOK{}
}

// WithXTraceID adds the xTraceId to the current user o k response
func (o *CurrentUserOK) WithXTraceID(xTraceID string) *CurrentUserOK {
	o.XTraceID = xTraceID
	return o
}

// SetXTraceID sets the xTraceId to the current user o k response
func (o *CurrentUserOK) SetXTraceID(xTraceID string) {
	o.XTraceID = xTraceID
}

// WithPayload adds the payload to the current user o k response
func (o *CurrentUserOK) WithPayload(payload *models.User) *CurrentUserOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the current user o k response
func (o *CurrentUserOK) SetPayload(payload *models.User) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CurrentUserOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Trace-Id

	xTraceID := o.XTraceID
	if xTraceID != "" {
		rw.Header().Set("X-Trace-Id", xTraceID)
	}

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
