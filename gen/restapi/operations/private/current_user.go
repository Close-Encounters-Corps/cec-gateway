// Code generated by go-swagger; DO NOT EDIT.

package private

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CurrentUserHandlerFunc turns a function with the right signature into a current user handler
type CurrentUserHandlerFunc func(CurrentUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CurrentUserHandlerFunc) Handle(params CurrentUserParams) middleware.Responder {
	return fn(params)
}

// CurrentUserHandler interface for that can handle valid current user params
type CurrentUserHandler interface {
	Handle(CurrentUserParams) middleware.Responder
}

// NewCurrentUser creates a new http.Handler for the current user operation
func NewCurrentUser(ctx *middleware.Context, handler CurrentUserHandler) *CurrentUser {
	return &CurrentUser{Context: ctx, Handler: handler}
}

/* CurrentUser swagger:route GET /0/users/current private currentUser

Get current user

*/
type CurrentUser struct {
	Context *middleware.Context
	Handler CurrentUserHandler
}

func (o *CurrentUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCurrentUserParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
